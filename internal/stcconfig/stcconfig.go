// Copyright 2021 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package ixconfig contains generated IxNetwork structs (along with some
// hand-written helper code) and implements an Ixia JSON config client using
// those structs.
//
// Since the autogenerated golang documentation for IxNetwork config structs in
// this package is long and hard to parse, see the OpenAPI spec for
// information about those structs instead:
// https://openixia.github.io/ixnetwork_openapi/
//
// Basic usage examples for the client can be found in README.md.
package stcconfig

import (
	"golang.org/x/net/context"

	"github.com/openconfig/ondatra/binding/stcweb"
)

type StcCfgData struct {
	Ate        string `json:"ate"`
	Interfaces string `json:"interfaces"`
	LAGs       string `json:"lags"`
}

type stcSession interface {
	Config() config
}

type config interface {
	Export(context.Context) (string, error)
	Import(context.Context, string, bool) error
}

type sessionWrapper struct {
	*stcweb.Session
}

func (sw *sessionWrapper) Config() config {
	return sw.Session.Config()
}

// Client implements an API for interacting with an Ixia session using a JSON-based config representation.
type Client struct {
	sess      stcSession
	xPathToID map[string]string
}

// New returns a new Ixia config Client for a specific session for the given Ixia controller connection.
func New(sess *stcweb.Session) *Client {
	return &Client{sess: &sessionWrapper{sess}}
}

// Session returns the IxNetwork session used by the config client.
func (c *Client) Session() *stcweb.Session {
	return c.sess.(*sessionWrapper).Session
}

func (c *Client) ExportConfig(ctx context.Context) (*StcCfgData, error) {
	return nil, nil
}

func (c *Client) ImportConfig(ctx context.Context, cfg *StcCfgData, overwrite bool) error {
	return nil
}

func (c *Client) LastImportedConfig() *StcCfgData {
	return nil
}
